https://leetcode.com/problems/search-in-rotated-sorted-array/

33. Search in Rotated Sorted Array
Medium

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        if(nums.size()==0)
            return -1;
        int low=0,high=nums.size()-1;
        
        int first=nums[0];
        while(low<=high){
            int mid=low+ (high-low)/2;
            int cur=nums[mid];
            
            if(cur==target)
                return mid;
            
            bool am_big = cur>=first;
            bool target_big= target>=first;
            
            if(am_big==target_big){
                if(target>cur)
                    low=mid+1;
                else
                    high=mid-1;
            }else{
                if(am_big)
                    low=mid+1;
                else
                    high=mid-1;
            }
        }
        return -1;
        
        /*
        auto it=find(nums.begin(),nums.end(),target);
        if(it==nums.end())
             return -1;
        return distance(nums.begin(),it);
        */
    }
};
